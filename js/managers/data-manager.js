// js/managers/data-manager.js
// Gestionnaire des donn√©es et g√©n√©ration des cartes

/**
 * Gestionnaire des donn√©es du site
 */
export class DataManager {
  constructor() {
    this.siteData = null;
    this.isLoaded = false;
  }

  /**
   * Charge les donn√©es depuis le fichier JSON
   */
  async loadSiteData() {
    try {
      const response = await fetch("data/data.json");
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      this.siteData = await response.json();
      this.isLoaded = true;
      return this.siteData;
    } catch (error) {
      console.error("‚ùå Erreur lors du chargement des donn√©es JSON:", error);
      this.siteData = this.getFallbackData();
      this.isLoaded = true;
      return this.siteData;
    }
  }

  /**
   * Donn√©es de secours en cas d'√©chec de chargement
   */
  getFallbackData() {
    return {
      vehicles: { mc: [], mafia: [], cartel: [], gang: [] },
      weapons: { pistols: [], rifles: [], explosives: [] },
      blackmarket: { drugs: [], contraband: [], documents: [] },
      services: { laundering: [] },
    };
  }

  /**
   * G√©n√®re les √©toiles pour les ratings
   */
  generateStars(rating) {
    return "‚òÖ".repeat(rating) + "‚òÜ".repeat(5 - rating);
  }

  /**
   * G√©n√®re une carte de v√©hicule
   */
  generateVehicleCard(vehicle) {
    const imageContent = vehicle.image.includes("img/")
      ? `<img src="${vehicle.image}" alt="${vehicle.name}" loading="lazy">`
      : vehicle.image;

    return `
      <div class="car-card">
        <h3 class="car-name">${vehicle.name}</h3>
        <div class="car-image">${imageContent}</div>
        <div class="car-details">
          <div class="detail-item"><span class="detail-label">Vitesse:</span> ${this.generateStars(
            vehicle.stats.vitesse
          )}</div>
          <div class="detail-item"><span class="detail-label">Acc√©l√©ration:</span> ${this.generateStars(
            vehicle.stats.acceleration
          )}</div>
          <div class="detail-item"><span class="detail-label">Freinage:</span> ${this.generateStars(
            vehicle.stats.freinage
          )}</div>
          <div class="detail-item"><span class="detail-label">Maniabilit√©:</span> ${this.generateStars(
            vehicle.stats.maniabilite
          )}</div>
        </div>
        <div class="price">üí∞ ${vehicle.price}</div>
        <button class="contact-btn" onclick="contact('${
          vehicle.name
        }')">Contacter pour ce v√©hicule</button>
      </div>
    `;
  }

  /**
   * G√©n√®re une carte d'arme
   */
  generateWeaponCard(weapon) {
    const imageContent = weapon.image.includes("img/")
      ? `<img src="${weapon.image}" alt="${weapon.name}" loading="lazy">`
      : weapon.image;

    const statsKeys = Object.keys(weapon.stats);
    const statsHTML = statsKeys
      .map((key) => {
        let label = key.charAt(0).toUpperCase() + key.slice(1);
        if (key === "degats") label = "D√©g√¢ts";
        if (key === "precision") label = "Pr√©cision";
        if (key === "portee") label = "Port√©e";

        const value =
          typeof weapon.stats[key] === "number"
            ? this.generateStars(weapon.stats[key])
            : weapon.stats[key];

        return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
      })
      .join("");

    return `
      <div class="car-card">
        <h3 class="car-name">${weapon.name}</h3>
        <div class="car-image">${imageContent}</div>
        <div class="car-details">
          ${statsHTML}
        </div>
        <div class="price">üí∞ ${weapon.price}</div>
        <button class="contact-btn" onclick="contact('${weapon.name}')">Contacter pour cette arme</button>
      </div>
    `;
  }

  /**
   * G√©n√®re une carte de drogue (sans prix ni contact)
   */
  generateDrugCard(drug) {
    const imageContent = drug.image.includes("img/")
      ? `<img src="${drug.image}" alt="${drug.name}" loading="lazy">`
      : drug.image;

    const statsKeys = Object.keys(drug.stats);
    const statsHTML = statsKeys
      .map((key) => {
        let label = key.charAt(0).toUpperCase() + key.slice(1);
        if (key === "qualite") label = "Qualit√©";
        if (key === "purete") label = "Puret√©";

        const value =
          typeof drug.stats[key] === "number"
            ? this.generateStars(drug.stats[key])
            : drug.stats[key];

        return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
      })
      .join("");

    return `
      <div class="car-card">
        <h3 class="car-name">${drug.name}</h3>
        <div class="car-image">${imageContent}</div>
        <div class="car-details">
          ${statsHTML}
        </div>
        <div class="resource-info">üìã Ressource √† d√©couvrir</div>
      </div>
    `;
  }

  /**
   * G√©n√®re une carte de march√© noir (autres que drogues)
   */
  generateBlackmarketCard(item) {
    const imageContent = item.image.includes("img/")
      ? `<img src="${item.image}" alt="${item.name}" loading="lazy">`
      : item.image;

    const statsKeys = Object.keys(item.stats);
    const statsHTML = statsKeys
      .map((key) => {
        let label = key.charAt(0).toUpperCase() + key.slice(1);
        if (key === "qualite") label = "Qualit√©";
        if (key === "purete") label = "Puret√©";
        if (key === "quantite") label = "Quantit√©";
        if (key === "discretion") label = "Discr√©tion";
        if (key === "authenticite") label = "Authenticit√©";
        if (key === "delai") label = "D√©lai";
        if (key === "garantie") label = "Garantie";

        const value =
          typeof item.stats[key] === "number"
            ? this.generateStars(item.stats[key])
            : item.stats[key];

        return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
      })
      .join("");

    return `
      <div class="car-card">
        <h3 class="car-name">${item.name}</h3>
        <div class="car-image">${imageContent}</div>
        <div class="car-details">
          ${statsHTML}
        </div>
        <div class="price">üí∞ ${item.price}</div>
        <button class="contact-btn" onclick="contact('${item.name}')">Contacter pour ce produit</button>
      </div>
    `;
  }

  /**
   * G√©n√®re une carte de service
   */
  generateServiceCard(service) {
    const imageContent = service.image.includes("img/")
      ? `<img src="${service.image}" alt="${service.name}" loading="lazy">`
      : service.image;

    const statsKeys = Object.keys(service.stats);
    const statsHTML = statsKeys
      .map((key) => {
        let label = key.charAt(0).toUpperCase() + key.slice(1);
        if (key === "capaciteMax") label = "Capacit√© max";
        if (key === "capaciteMin") label = "Capacit√© min";
        if (key === "delai") label = "D√©lai";
        if (key === "discretion") label = "Discr√©tion";

        const value =
          typeof service.stats[key] === "number"
            ? this.generateStars(service.stats[key])
            : service.stats[key];

        return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
      })
      .join("");

    return `
      <div class="car-card">
        <h3 class="car-name">${service.name}</h3>
        <div class="car-image">${imageContent}</div>
        <div class="car-details">
          ${statsHTML}
        </div>
        <div class="price">üí∞ ${service.price}</div>
        <button class="contact-btn" onclick="contact('${service.name}')">Contacter pour ce service</button>
      </div>
    `;
  }

  /**
   * Initialise tout le contenu des cartes
   */
  async initializeContent() {
    if (!this.isLoaded) {
      await this.loadSiteData();
    }

    if (!this.siteData) {
      console.error("‚ùå Impossible de charger les donn√©es");
      return false;
    }

    let success = true;

    // V√©hicules
    Object.keys(this.siteData.vehicles).forEach((category) => {
      const container = document.querySelector(`#${category} .cars-grid`);
      if (container && this.siteData.vehicles[category]) {
        container.innerHTML = this.siteData.vehicles[category]
          .map((vehicle) => this.generateVehicleCard(vehicle))
          .join("");
      } else if (this.siteData.vehicles[category]?.length > 0) {
        console.warn(`Container not found for vehicles.${category}`);
        success = false;
      }
    });

    // Armes
    Object.keys(this.siteData.weapons).forEach((category) => {
      const container = document.querySelector(`#${category} .cars-grid`);
      if (container && this.siteData.weapons[category]) {
        container.innerHTML = this.siteData.weapons[category]
          .map((weapon) => this.generateWeaponCard(weapon))
          .join("");
      } else if (this.siteData.weapons[category]?.length > 0) {
        console.warn(`Container not found for weapons.${category}`);
        success = false;
      }
    });

    // March√© noir
    Object.keys(this.siteData.blackmarket).forEach((category) => {
      const container = document.querySelector(`#${category} .cars-grid`);
      if (container && this.siteData.blackmarket[category]) {
        if (category === "drugs") {
          container.innerHTML = this.siteData.blackmarket[category]
            .map((drug) => this.generateDrugCard(drug))
            .join("");
        } else {
          container.innerHTML = this.siteData.blackmarket[category]
            .map((item) => this.generateBlackmarketCard(item))
            .join("");
        }
      } else if (this.siteData.blackmarket[category]?.length > 0) {
        console.warn(`Container not found for blackmarket.${category}`);
        success = false;
      }
    });

    // Services
    Object.keys(this.siteData.services).forEach((category) => {
      const container = document.querySelector(`#${category} .cars-grid`);
      if (container && this.siteData.services[category]) {
        container.innerHTML = this.siteData.services[category]
          .map((service) => this.generateServiceCard(service))
          .join("");
      } else if (this.siteData.services[category]?.length > 0) {
        console.warn(`Container not found for services.${category}`);
        success = false;
      }
    });

    if (success) {
      console.log("‚úÖ Contenu des cartes initialis√© avec succ√®s");
    } else {
      console.warn("‚ö†Ô∏è Certains conteneurs de cartes non trouv√©s");
    }

    return success;
  }

  /**
   * Recharge les donn√©es et r√©g√©n√®re le contenu
   */
  async reloadData() {
    this.isLoaded = false;
    this.siteData = null;
    return await this.initializeContent();
  }

  /**
   * Retourne les donn√©es charg√©es
   */
  getData() {
    return this.siteData;
  }

  /**
   * V√©rifie si les donn√©es sont charg√©es
   */
  isDataLoaded() {
    return this.isLoaded && this.siteData !== null;
  }
}

// Instance singleton
export const dataManager = new DataManager();
