// data.js - Version JSON optimis√©e
let siteData = null;

// Fonction pour charger les donn√©es JSON
async function loadSiteData() {
  try {
    const response = await fetch("data/data.json");
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    siteData = await response.json();
    console.log("Donn√©es JSON charg√©es avec succ√®s");
    return siteData;
  } catch (error) {
    console.error("Erreur lors du chargement des donn√©es JSON:", error);
    // Fallback vers des donn√©es vides si le chargement √©choue
    siteData = {
      vehicles: { mc: [], mafia: [], cartel: [], gang: [] },
      weapons: { pistols: [], rifles: [], explosives: [] },
      blackmarket: { drugs: [], contraband: [], documents: [] },
      services: { laundering: [] },
    };
    return siteData;
  }
}

// Fonction pour g√©n√©rer les √©toiles
function generateStars(rating) {
  return "‚òÖ".repeat(rating) + "‚òÜ".repeat(5 - rating);
}

// Fonction pour g√©n√©rer une carte de v√©hicule
function generateVehicleCard(vehicle) {
  const imageContent = vehicle.image.includes("img/")
    ? `<img src="${vehicle.image}" alt="${vehicle.name}">`
    : vehicle.image;

  return `
        <div class="car-card">
            <h3 class="car-name">${vehicle.name}</h3>
            <div class="car-image">${imageContent}</div>
            <div class="car-details">
                <div class="detail-item"><span class="detail-label">Vitesse:</span> ${generateStars(
                  vehicle.stats.vitesse
                )}</div>
                <div class="detail-item"><span class="detail-label">Acc√©l√©ration:</span> ${generateStars(
                  vehicle.stats.acceleration
                )}</div>
                <div class="detail-item"><span class="detail-label">Freinage:</span> ${generateStars(
                  vehicle.stats.freinage
                )}</div>
                <div class="detail-item"><span class="detail-label">Maniabilit√©:</span> ${generateStars(
                  vehicle.stats.maniabilite
                )}</div>
            </div>
            <div class="price">üí∞ ${vehicle.price}</div>
            <button class="contact-btn" onclick="contact('${
              vehicle.name
            }')">Contacter pour ce v√©hicule</button>
        </div>
    `;
}

// Fonction pour g√©n√©rer une carte d'arme
function generateWeaponCard(weapon) {
  const imageContent = weapon.image.includes("img/")
    ? `<img src="${weapon.image}" alt="${weapon.name}">`
    : weapon.image;

  const statsKeys = Object.keys(weapon.stats);
  const statsHTML = statsKeys
    .map((key) => {
      let label = key.charAt(0).toUpperCase() + key.slice(1);
      if (key === "degats") label = "D√©g√¢ts";
      if (key === "precision") label = "Pr√©cision";
      if (key === "portee") label = "Port√©e";

      const value =
        typeof weapon.stats[key] === "number"
          ? generateStars(weapon.stats[key])
          : weapon.stats[key];

      return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
    })
    .join("");

  return `
        <div class="car-card">
            <h3 class="car-name">${weapon.name}</h3>
            <div class="car-image">${imageContent}</div>
            <div class="car-details">
                ${statsHTML}
            </div>
            <div class="price">üí∞ ${weapon.price}</div>
            <button class="contact-btn" onclick="contact('${weapon.name}')">Contacter pour cette arme</button>
        </div>
    `;
}

// Fonction pour g√©n√©rer une carte de drogue (sans prix ni contact)
function generateDrugCard(drug) {
  const imageContent = drug.image.includes("img/")
    ? `<img src="${drug.image}" alt="${drug.name}">`
    : drug.image;

  const statsKeys = Object.keys(drug.stats);
  const statsHTML = statsKeys
    .map((key) => {
      let label = key.charAt(0).toUpperCase() + key.slice(1);
      if (key === "qualite") label = "Qualit√©";
      if (key === "purete") label = "Puret√©";

      const value =
        typeof drug.stats[key] === "number"
          ? generateStars(drug.stats[key])
          : drug.stats[key];

      return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
    })
    .join("");

  return `
        <div class="car-card">
            <h3 class="car-name">${drug.name}</h3>
            <div class="car-image">${imageContent}</div>
            <div class="car-details">
                ${statsHTML}
            </div>
            <div class="resource-info">üìã Ressource √† d√©couvrir</div>
        </div>
    `;
}

// Fonction pour g√©n√©rer une carte de march√© noir (autres que drogues)
function generateBlackmarketCard(item) {
  const imageContent = item.image.includes("img/")
    ? `<img src="${item.image}" alt="${item.name}">`
    : item.image;

  const statsKeys = Object.keys(item.stats);
  const statsHTML = statsKeys
    .map((key) => {
      let label = key.charAt(0).toUpperCase() + key.slice(1);
      if (key === "qualite") label = "Qualit√©";
      if (key === "purete") label = "Puret√©";
      if (key === "quantite") label = "Quantit√©";
      if (key === "discretion") label = "Discr√©tion";
      if (key === "authenticite") label = "Authenticit√©";
      if (key === "delai") label = "D√©lai";
      if (key === "garantie") label = "Garantie";

      const value =
        typeof item.stats[key] === "number"
          ? generateStars(item.stats[key])
          : item.stats[key];

      return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
    })
    .join("");

  return `
        <div class="car-card">
            <h3 class="car-name">${item.name}</h3>
            <div class="car-image">${imageContent}</div>
            <div class="car-details">
                ${statsHTML}
            </div>
            <div class="price">üí∞ ${item.price}</div>
            <button class="contact-btn" onclick="contact('${item.name}')">Contacter pour ce produit</button>
        </div>
    `;
}

// Fonction pour g√©n√©rer une carte de service
function generateServiceCard(service) {
  const imageContent = service.image.includes("img/")
    ? `<img src="${service.image}" alt="${service.name}">`
    : service.image;

  const statsKeys = Object.keys(service.stats);
  const statsHTML = statsKeys
    .map((key) => {
      let label = key.charAt(0).toUpperCase() + key.slice(1);
      if (key === "capaciteMax") label = "Capacit√© max";
      if (key === "capaciteMin") label = "Capacit√© min";
      if (key === "delai") label = "D√©lai";
      if (key === "discretion") label = "Discr√©tion";

      const value =
        typeof service.stats[key] === "number"
          ? generateStars(service.stats[key])
          : service.stats[key];

      return `<div class="detail-item"><span class="detail-label">${label}:</span> ${value}</div>`;
    })
    .join("");

  return `
        <div class="car-card">
            <h3 class="car-name">${service.name}</h3>
            <div class="car-image">${imageContent}</div>
            <div class="car-details">
                ${statsHTML}
            </div>
            <div class="price">üí∞ ${service.price}</div>
            <button class="contact-btn" onclick="contact('${service.name}')">Contacter pour ce service</button>
        </div>
    `;
}

// Fonction pour initialiser tout le contenu
async function initializeContent() {
  // Attendre que les donn√©es soient charg√©es
  if (!siteData) {
    await loadSiteData();
  }

  // V√©rifier que les donn√©es sont disponibles
  if (!siteData) {
    console.error("Impossible de charger les donn√©es");
    return;
  }

  // V√©hicules
  Object.keys(siteData.vehicles).forEach((category) => {
    const container = document.querySelector(`#${category} .cars-grid`);
    if (container && siteData.vehicles[category]) {
      container.innerHTML = siteData.vehicles[category]
        .map(generateVehicleCard)
        .join("");
    }
  });

  // Armes
  Object.keys(siteData.weapons).forEach((category) => {
    const container = document.querySelector(`#${category} .cars-grid`);
    if (container && siteData.weapons[category]) {
      container.innerHTML = siteData.weapons[category]
        .map(generateWeaponCard)
        .join("");
    }
  });

  // March√© noir
  Object.keys(siteData.blackmarket).forEach((category) => {
    const container = document.querySelector(`#${category} .cars-grid`);
    if (container && siteData.blackmarket[category]) {
      // Traitement sp√©cial pour les drogues
      if (category === "drugs") {
        container.innerHTML = siteData.blackmarket[category]
          .map(generateDrugCard)
          .join("");
      } else {
        container.innerHTML = siteData.blackmarket[category]
          .map(generateBlackmarketCard)
          .join("");
      }
    }
  });

  // Services
  Object.keys(siteData.services).forEach((category) => {
    const container = document.querySelector(`#${category} .cars-grid`);
    if (container && siteData.services[category]) {
      container.innerHTML = siteData.services[category]
        .map(generateServiceCard)
        .join("");
    }
  });

  console.log("Contenu initialis√© avec succ√®s");
}

// Fonction pour recharger les donn√©es (utile pour le d√©veloppement)
async function reloadData() {
  console.log("Rechargement des donn√©es...");
  await loadSiteData();
  await initializeContent();
}

// Initialisation au chargement de la page
document.addEventListener("DOMContentLoaded", async function () {
  console.log("DOM charg√©, initialisation des donn√©es...");
  await initializeContent();
});

// Pr√©charger les donn√©es d√®s que possible
(async function () {
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", async () => {
      await loadSiteData();
    });
  } else {
    await loadSiteData();
  }
})();

// Export des fonctions pour pouvoir les utiliser depuis la console (d√©veloppement)
window.reloadData = reloadData;
window.siteData = siteData;
